(window.webpackJsonp=window.webpackJsonp||[]).push([[14],{226:function(t,a,_){"use strict";_.r(a);var s=_(19),v=Object(s.a)({},(function(){var t=this,a=t.$createElement,_=t._self._c||a;return _("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[_("blockquote",[_("p",[t._v("在最底层，Java 中的数据是通过使用操作符来操作的。")])]),t._v(" "),_("h2",{attrs:{id:"_3-1-静态导入"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-静态导入"}},[t._v("#")]),t._v(" 3.1 静态导入")]),t._v(" "),_("p",[t._v("可以使用"),_("strong",[t._v("静态导入")]),_("code",[t._v("import static")]),t._v("的方式来导入其它类库。例如：")]),t._v(" "),_("div",{staticClass:"language-java extra-class"},[_("pre",{pre:!0,attrs:{class:"language-java"}},[_("code",[_("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token namespace"}},[t._v("java"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("lang")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),_("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),_("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token namespace"}},[t._v("java"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("lang")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),_("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Integer")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("*"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),_("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("TestStaticImport")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n   "),_("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),_("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" args"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n       out"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),_("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("MAX_VALUE"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n       out"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),_("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),_("span",{pre:!0,attrs:{class:"token function"}},[t._v("toHexString")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),_("span",{pre:!0,attrs:{class:"token number"}},[t._v("42")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),_("h2",{attrs:{id:"_3-3-操作符优先级"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_3-3-操作符优先级"}},[t._v("#")]),t._v(" 3.3 操作符优先级")]),t._v(" "),_("p",[t._v("当执行操作符运算时，由于程序员经常忘记优先级顺序，所以最好使用小括号来明确规定运算顺序。")]),t._v(" "),_("p",[t._v("当"),_("code",[t._v("String")]),t._v('类型元素后出现"+"操作符，编译器会试图将之后的非'),_("code",[t._v("String")]),t._v("元素转换成"),_("code",[t._v("String")]),t._v("。")]),t._v(" "),_("h2",{attrs:{id:"_3-4-赋值运算"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_3-4-赋值运算"}},[t._v("#")]),t._v(" 3.4 赋值运算")]),t._v(" "),_("p",[t._v("基本类型实际存储了实际的值，并非指向了一个对象的"),_("strong",[t._v("引用")]),t._v("。所以赋值时，是将一个地方的内容直接复制到另一处，这与对象的"),_("strong",[t._v("引用")]),t._v("不同。")]),t._v(" "),_("p",[t._v("在对对象赋值时，实际操作的是对象的"),_("strong",[t._v("引用")]),t._v("，将对象的"),_("strong",[t._v("引用")]),t._v("从一个地方复制到另一地方。")]),t._v(" "),_("p",[t._v("方法中的形参也是如此，传递的也只是对象的引用。")]),t._v(" "),_("h2",{attrs:{id:"_3-5-random-的简单说明"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_3-5-random-的简单说明"}},[t._v("#")]),t._v(" 3.5 Random 的简单说明")]),t._v(" "),_("p",[t._v("如果在创建"),_("code",[t._v("Random")]),t._v("的对象时，没有传递任何参数，那么Java就会将当前时间作为随机数生成器的种子，由此在程序每一次执行时都产生不同的输出。")]),t._v(" "),_("p",[t._v("如果在创建"),_("code",[t._v("Random")]),t._v("对象时提供种子，随机数生成器对于特定的种子值总是产生相同的随机数序列。因此每次执行程序时都生成相同的随机数。")]),t._v(" "),_("p",[t._v("通过"),_("code",[t._v("Random")]),t._v("的对象可以生成不同类型的随机数，例如"),_("code",[t._v("nextInt()")]),t._v(","),_("code",[t._v("nextLong()")]),t._v("等，传给它们的参数为产生随机数的上限，下限为0。如果你要"),_("strong",[t._v("1~100")]),t._v("，那么你需要"),_("code",[t._v("nextInt(100)+1")])]),t._v(" "),_("h2",{attrs:{id:"_3-6-前缀式和后缀式"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_3-6-前缀式和后缀式"}},[t._v("#")]),t._v(" 3.6 前缀式和后缀式")]),t._v(" "),_("p",[t._v("分为"),_("strong",[t._v("前缀式")]),t._v("和"),_("strong",[t._v("后缀式")]),t._v("，"),_("strong",[t._v("前缀式")]),t._v("先运算再生成值，"),_("strong",[t._v("后缀式")]),t._v("先生成值再运算。")]),t._v(" "),_("h2",{attrs:{id:"_3-7-关系操作符"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_3-7-关系操作符"}},[t._v("#")]),t._v(" 3.7 关系操作符")]),t._v(" "),_("h3",{attrs:{id:"_3-7-1-测试对象的等价性"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_3-7-1-测试对象的等价性"}},[t._v("#")]),t._v(" 3.7.1 测试对象的等价性")]),t._v(" "),_("p",[t._v("与基本数据类型相比，"),_("strong",[t._v("==")]),t._v(" 和 "),_("strong",[t._v("!=")]),t._v(" 比较的是对象的"),_("strong",[t._v("引用")]),t._v("，所以要比较对象是否相同，应该使用 "),_("code",[t._v("equals()")]),t._v(" 。这个方法不适用于基本数据类型。")]),t._v(" "),_("p",[_("strong",[t._v("注意："),_("strong",[t._v("当创建一个类时，"),_("code",[t._v("equals()")]),t._v("的默认行为是")]),t._v("比较引用")]),t._v("，若需要期望的效果，需要"),_("strong",[t._v("覆盖")]),t._v("它。")]),t._v(" "),_("h2",{attrs:{id:"_3-8-逻辑操作符"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_3-8-逻辑操作符"}},[t._v("#")]),t._v(" 3.8 逻辑操作符")]),t._v(" "),_("ul",[_("li",[t._v("与("),_("code",[t._v("&&")]),t._v(")")]),t._v(" "),_("li",[t._v("或("),_("code",[t._v("||")]),t._v(")")]),t._v(" "),_("li",[t._v("非("),_("code",[t._v("!")]),t._v(")")])]),t._v(" "),_("h3",{attrs:{id:"_3-8-1-短路运算"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_3-8-1-短路运算"}},[t._v("#")]),t._v(" 3.8.1 短路运算")]),t._v(" "),_("p",[t._v("一旦能够确定整个表达式的值，就不再计算表达式余下部分，因此，整个逻辑表达式靠后的部分有可能不会被运算。")]),t._v(" "),_("p",[t._v("如果所有的逻辑表达式都有一部分不必计算，那么将获得潜在性能提升。")]),t._v(" "),_("h2",{attrs:{id:"_3-9-基本类型的窄型转化"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_3-9-基本类型的窄型转化"}},[t._v("#")]),t._v(" 3.9 基本类型的窄型转化")]),t._v(" "),_("p",[t._v("可以使用直接常量来表示八进制数，十六进制数等。")]),t._v(" "),_("p",[t._v("如果将 "),_("code",[t._v("int")]),t._v(" 类型强制转换成 "),_("code",[t._v("short")]),t._v("，"),_("code",[t._v("byte")]),t._v("等类型，超出范围的数据会进行"),_("strong",[t._v("窄型转化")]),t._v("。例如："),_("code",[t._v("int = 0x101")]),t._v(" 转换成 "),_("code",[t._v("byte")]),t._v("，"),_("code",[t._v("byte")]),t._v("的范围是 "),_("code",[t._v("-128~127")]),t._v("，无法存储"),_("strong",[t._v("257")]),t._v("，这时会发生"),_("strong",[t._v("窄型转化")]),t._v("，结果为"),_("strong",[t._v("1")]),t._v("。")]),t._v(" "),_("h2",{attrs:{id:"_3-10-按位操作符"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_3-10-按位操作符"}},[t._v("#")]),t._v(" 3.10 按位操作符")]),t._v(" "),_("p",[t._v("与("),_("code",[t._v("&")]),t._v(")，或("),_("code",[t._v("|")]),t._v(")，非("),_("code",[t._v("~")]),t._v(")，异或("),_("code",[t._v("^")]),t._v(")，对"),_("strong",[t._v("二进制位")]),t._v("进行操作。")]),t._v(" "),_("h2",{attrs:{id:"_3-11-移位操作符"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_3-11-移位操作符"}},[t._v("#")]),t._v(" 3.11 移位操作符")]),t._v(" "),_("p",[_("strong",[t._v("移位操作符")]),t._v("操作的运算对象也是二进制的位，只能用来处理整数类型。")]),t._v(" "),_("p",[t._v("左移位操作符("),_("code",[t._v("<<")]),t._v(")能够按照移动位数向左移动（在低位补0）。右移位操作符("),_("code",[t._v(">>")]),t._v(")则按照位数向右移动，若符号为正，则高位补0；若符号为负，则高位补1。")]),t._v(" "),_("p",[t._v("Java 中还提供了“无符号”右移位操作符("),_("code",[t._v(">>>")]),t._v(")，无论正负，都在高位补0。")]),t._v(" "),_("h2",{attrs:{id:"_3-13-字符串操作符-和"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_3-13-字符串操作符-和"}},[t._v("#")]),t._v(" 3.13 字符串操作符 + 和 +=")]),t._v(" "),_("p",[t._v("如果表达式以字符串开头，那么所有后续操作数都必须是字符串型。")]),t._v(" "),_("h2",{attrs:{id:"_3-15-类型转换-显式和扩展"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_3-15-类型转换-显式和扩展"}},[t._v("#")]),t._v(" 3.15 类型转换:显式和扩展")]),t._v(" "),_("p",[_("strong",[t._v("窄化转换")]),t._v("是将高类型的数据转换成低类型的数据，有可能发生信息丢失的风险，编译器会强制我们进行"),_("strong",[t._v("显式类型转换")]),t._v("，而"),_("strong",[t._v("扩展转换")]),t._v("则不必要进行"),_("strong",[t._v("显示类型转换")]),t._v("，因为新类型肯定能容纳原类型信息，不会造成信息丢失。")]),t._v(" "),_("p",[t._v("Java允许任何基本类型之间的转换，但布尔型不允许进行任何类型的转换处理。")]),t._v(" "),_("h3",{attrs:{id:"_3-15-1-截尾和舍入"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_3-15-1-截尾和舍入"}},[t._v("#")]),t._v(" 3.15.1 截尾和舍入")]),t._v(" "),_("p",[t._v("浮点型转换成整数时，会自动截尾。若要四舍五入，可使用"),_("code",[t._v("Math.round()")]),t._v("方法。")]),t._v(" "),_("h3",{attrs:{id:"_3-15-2-类型自动提升"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_3-15-2-类型自动提升"}},[t._v("#")]),t._v(" 3.15.2 类型自动提升")]),t._v(" "),_("p",[t._v("表达式中最大的数据类型决定了表达式最终结果的数据类型。")]),t._v(" "),_("h2",{attrs:{id:"_3-17-总结"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_3-17-总结"}},[t._v("#")]),t._v(" 3.17 总结")]),t._v(" "),_("p",[t._v("能够对布尔型进行的运算非常有限，只能赋予它"),_("code",[t._v("true")]),t._v("和"),_("code",[t._v("false")]),t._v("，不能将布尔值相加和其它运算。")]),t._v(" "),_("p",[t._v("在"),_("code",[t._v("char")]),t._v(","),_("code",[t._v("byte")]),t._v(","),_("code",[t._v("short")]),t._v("中，使用算术操作符中数据类型提升。对这些类型进行算术运算都会获得"),_("code",[t._v("int")]),t._v("结果，必须"),_("strong",[t._v("显式类型转换")]),t._v("回原类型，可能会发生"),_("strong",[t._v("窄化转换")]),t._v("。")])])}),[],!1,null,null,null);a.default=v.exports}}]);