(window.webpackJsonp=window.webpackJsonp||[]).push([[17],{230:function(e,_,t){"use strict";t.r(_);var v=t(19),s=Object(v.a)({},(function(){var e=this,_=e.$createElement,t=e._self._c||_;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h2",{attrs:{id:"什么是-oauth"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#什么是-oauth"}},[e._v("#")]),e._v(" 什么是 OAuth")]),e._v(" "),t("p",[e._v("OAuth 协议为用户资源的授权提供了一个安全的，开放而又简易的标准。与以往的授权方式不同之处是 OAuth 的授权不会是第三方触及到用户的账号信息（如用户名密码），即第三方无需使用用户的用户名密码就可以申请获得该用户资源的授权，因此 OAuth 是安全的。")]),e._v(" "),t("h2",{attrs:{id:"什么是-spring-security"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#什么是-spring-security"}},[e._v("#")]),e._v(" 什么是 Spring Security")]),e._v(" "),t("p",[e._v("Spring Security 是一个安全框架，前身是 Acegi Security，能够为 Spring 企业应用系统提供声明式的安全访问控制。Spring Security 基于 Servlet 过滤器，IoC 和 AOP ，为 Web 请求和方法调用提供身份确认和授权处理，避免了代码耦合。")]),e._v(" "),t("h2",{attrs:{id:"为什么需要-oauth2"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#为什么需要-oauth2"}},[e._v("#")]),e._v(" 为什么需要 OAuth2")]),e._v(" "),t("p",[e._v("我们假设你有一个“云笔记”产品，并提供了“云笔记服务”和“云相册服务”，此时用户需要在不同的设备（PC、Android、iPhone、TV、Watch）上去访问这些“资源”（笔记，图片）")]),e._v(" "),t("p",[e._v("那么用户如何才能访问属于自己的那部分资源呢？此时传统的做法就是提供自己的账号和密码给我们的“云笔记”，登录成功后就可以获取资源了。但这样的做法会有以下几个问题：")]),e._v(" "),t("ul",[t("li",[e._v("“云笔记服务”和“云相册服务”会分别部署，难道我们要分别登录吗？")]),e._v(" "),t("li",[e._v("如果有第三方应用程序想要接入我们的“云笔记”，难道需要用户提供账号和密码给第三方应用程序，让他记录后再访问我们的资源吗？")]),e._v(" "),t("li",[e._v("用户如何限制第三方应用程序在我们“云笔记”的授权范围和使用期限？难道把所有资料都永久暴露给它吗？")]),e._v(" "),t("li",[e._v("如果用户修改了密码收回了权限，那么所有第三方应用程序会全部失效。")]),e._v(" "),t("li",[e._v("只要有一个接入的第三方应用程序遭到破解，那么用户的密码就会泄露，后果不堪设想。")])]),e._v(" "),t("p",[e._v("为了解决如上问题，oAuth 应运而生。")]),e._v(" "),t("h2",{attrs:{id:"oauth2-开放平台"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#oauth2-开放平台"}},[e._v("#")]),e._v(" oAuth2 开放平台")]),e._v(" "),t("p",[e._v("开放平台是由 oAuth2.0 协议衍生出来的一个产品。它的作用是让客户端自己去这上面进行注册、申请，通过之后系统自动分配 client_id ，并完成配置的自动更新（通常是写进数据库）。")]),e._v(" "),t("p",[e._v("客户端要完成申请，通常需要填写客户端程序的类型（Web、App 等）、企业介绍、执照、想要获取的权限等等信息。这些信息在得到服务提供方的人工审核通过后，开发平台就会自动分配一个 client_id 给客户端了。")]),e._v(" "),t("p",[e._v("到这里，已经实现了登录认证、授权页的信息展示。那么接下来，当用户成功进行授权之后，认证服务器需要把产生的 access_token 发送给客户端，方案如下：")]),e._v(" "),t("ul",[t("li",[e._v("让客户端在开放平台申请的时候，填写一个 URL，例如：https://blog.yinjinbiao.top")]),e._v(" "),t("li",[e._v("每次当有用户授权成功之后，认证服务器将页面重定向到这个 URL（回调），并带上 access_token，例如：https://blog.yinjinbiao.top?access_token=123456789")]),e._v(" "),t("li",[e._v("客户端接收到了这个 access_token，而且认证服务器的授权动作已经完成，刚好可以把程序的控制权转交回客户端，由客户端决定接下来向用户展示什么内容")])]),e._v(" "),t("h2",{attrs:{id:"四种授权模式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#四种授权模式"}},[e._v("#")]),e._v(" 四种授权模式")]),e._v(" "),t("h3",{attrs:{id:"简化模式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#简化模式"}},[e._v("#")]),e._v(" 简化模式")]),e._v(" "),t("p",[e._v("简化模式适用于纯静态页面应用。所谓纯静态页面应用，也就是应用没有在服务器上执行代码的权限（通常是把代码托管在别人的服务器上），只有前端 JS 代码的控制权。")]),e._v(" "),t("p",[e._v("这种场景下，应用是没有持久化存储的能力的。因此，按照 oAuth2.0 的规定，这种应用是拿不到 Refresh Token 的。")]),e._v(" "),t("p",[e._v("该模式下，access_token 容易泄露且不可刷新。")]),e._v(" "),t("h3",{attrs:{id:"授权码模式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#授权码模式"}},[e._v("#")]),e._v(" 授权码模式")]),e._v(" "),t("p",[e._v("授权码模式适用于有自己的服务器的应用，它是一个一次性的临时凭证，用来换取 "),t("code",[e._v("access_token")]),e._v(" 和 "),t("code",[e._v("refresh_token")]),e._v("。认证服务器提供了一个类似这样的接口：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("https://www.funtl.com/exchange?code=&client_id=&client_secret=\n")])])]),t("ol",[t("li",[e._v("客户端请求第三方授权")]),e._v(" "),t("li",[e._v("用户（资源拥有者）同意给客户端授权")]),e._v(" "),t("li",[e._v("客户端获取到授权码，请求认证服务器申请令牌")]),e._v(" "),t("li",[e._v("认证服务器向客户端响应令牌")]),e._v(" "),t("li",[e._v("客户端请求资源服务器的资源")]),e._v(" "),t("li",[e._v("资源服务器返回受保护资源")])]),e._v(" "),t("p",[e._v("需要传入 "),t("code",[e._v("code")]),e._v("、"),t("code",[e._v("client_id")]),e._v(" 以及 "),t("code",[e._v("client_secret")]),e._v("。验证通过后，返回 "),t("code",[e._v("access_token")]),e._v(" 和 "),t("code",[e._v("refresh_token")]),e._v("。一旦换取成功，"),t("code",[e._v("code")]),e._v(" 立即作废，不能再使用第二次。")]),e._v(" "),t("p",[e._v("这个 "),t("code",[e._v("code")]),e._v(" 的作用是保护 "),t("code",[e._v("token")]),e._v(" 的安全性。简单模式下，"),t("code",[e._v("token")]),e._v(" 是不安全的。这是因为直接把 token 返回给应用容易被拦截、窃听。引入了 "),t("code",[e._v("code")]),e._v(" 之后，即使攻击者能够窃取到 "),t("code",[e._v("code")]),e._v("，但是由于他无法获得应用保存在服务器的 "),t("code",[e._v("client_secret")]),e._v("，因此也无法通过 "),t("code",[e._v("code")]),e._v(" 换取 "),t("code",[e._v("token")]),e._v("。为什么不容易被拦截、窃听呢？这是因为，首先，这是一个从服务器到服务器的访问，黑客比较难捕捉到；其次，这个请求通常要求是 https 的实现。即使能窃听到数据包也无法解析出内容。")]),e._v(" "),t("p",[e._v("有了这个 "),t("code",[e._v("code")]),e._v("，"),t("code",[e._v("token")]),e._v(" 的安全性大大提高。因此，oAuth2.0 鼓励使用这种方式进行授权，而简单模式则是在不得已情况下才会使用。")]),e._v(" "),t("h3",{attrs:{id:"密码模式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#密码模式"}},[e._v("#")]),e._v(" 密码模式")]),e._v(" "),t("p",[e._v('密码模式中，用户向客户端提供自己的用户名和密码。客户端使用这些信息，向 "服务商提供商" 索要授权。在这种模式中，用户必须把自己的密码给客户端，但是客户端不得储存密码。这通常用在用户对客户端高度信任的情况下，比如客户端是操作系统的一部分。')]),e._v(" "),t("p",[e._v("一个典型的例子是同一个企业内部的不同产品要使用本企业的 oAuth2.0 体系。在有些情况下，产品希望能够定制化授权页面。由于是同个企业，不需要向用户展示“xxx将获取以下权限”等字样并询问用户的授权意向，而只需进行用户的身份认证即可。这个时候，由具体的产品团队开发定制化的授权界面，接收用户输入账号密码，并直接传递给鉴权服务器进行授权即可。")]),e._v(" "),t("p",[e._v("有一点需要特别注意的是，在第 2 步中，认证服务器需要对客户端的身份进行验证，确保是受信任的客户端。")]),e._v(" "),t("h3",{attrs:{id:"客户端模式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#客户端模式"}},[e._v("#")]),e._v(" 客户端模式")]),e._v(" "),t("p",[e._v("如果信任关系再进一步，或者调用者是一个后端的模块，没有用户界面的时候，可以使用客户端模式。鉴权服务器直接对客户端进行身份验证，验证通过后，返回 token。")]),e._v(" "),t("h2",{attrs:{id:"令牌的访问与刷新"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#令牌的访问与刷新"}},[e._v("#")]),e._v(" 令牌的访问与刷新")]),e._v(" "),t("h3",{attrs:{id:"access-token"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#access-token"}},[e._v("#")]),e._v(" Access Token")]),e._v(" "),t("p",[t("code",[e._v("Access Token")]),e._v(" 是客户端访问资源服务器的令牌。拥有这个令牌代表着得到用户的授权。然而，这个授权应该是"),t("strong",[e._v("临时")]),e._v("的，有一定有效期。这是因为，"),t("code",[e._v("Access Token")]),e._v(" 在使用的过程中"),t("strong",[e._v("可能会泄露")]),e._v("。给 "),t("code",[e._v("Access Token")]),e._v(" 限定一个 较短的有效期 可以降低因 "),t("code",[e._v("Access Token")]),e._v(" 泄露而带来的风险。")]),e._v(" "),t("p",[e._v("然而引入了有效期之后，客户端使用起来就不那么方便了。每当 Access Token 过期，客户端就必须重新向用户索要授权。这样用户可能每隔几天，甚至每天都需要进行授权操作。这是一件非常影响用户体验的事情。希望有一种方法，可以避免这种情况。")]),e._v(" "),t("p",[e._v("于是 oAuth2.0 引入了 Refresh Token 机制")]),e._v(" "),t("h3",{attrs:{id:"refresh-token"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#refresh-token"}},[e._v("#")]),e._v(" Refresh Token")]),e._v(" "),t("p",[e._v("Refresh Token 的作用是用来刷新 "),t("code",[e._v("Access Token")]),e._v("。认证服务器提供一个刷新接口，例如：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("http://blog.yinjinbiao.top/refresh?refresh_token=&client_id=\n")])])]),t("p",[e._v("传入 "),t("code",[e._v("refresh_token")]),e._v(" 和 "),t("code",[e._v("client_id")]),e._v("，认证服务器验证通过后，返回一个新的 "),t("code",[e._v("Access Token")]),e._v("。为了安全，oAuth2.0 引入了两个措施：")]),e._v(" "),t("ul",[t("li",[e._v("OAuth2.0 要求，Refresh Token 一定是保存在客户端的服务器上 ，而绝不能存放在狭义的客户端（例如 App、PC 端软件）上。调用 refresh 接口的时候，一定是从服务器到服务器的访问。")]),e._v(" "),t("li",[e._v("OAuth2.0 引入了 "),t("code",[e._v("client_secret")]),e._v(" 机制。即每一个 "),t("code",[e._v("client_id")]),e._v(" 都对应一个 "),t("code",[e._v("client_secret")]),e._v("。这个 "),t("code",[e._v("client_secret")]),e._v(" 会在客户端申请 "),t("code",[e._v("client_id")]),e._v(" 时，随 "),t("code",[e._v("client_id")]),e._v(" 一起分配给客户端。客户端必须把 "),t("code",[e._v("client_secret")]),e._v(" 妥善保管在服务器上，决不能泄露。刷新 "),t("code",[e._v("Access Token")]),e._v(" 时，需要验证这个 "),t("code",[e._v("client_secret")]),e._v("。")])]),e._v(" "),t("p",[e._v("实际上的刷新接口类似于：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("http://blog.yinjinbiao.top/refresh?refresh_token=&client_id=&client_secret=\n")])])]),t("p",[e._v("以上就是 "),t("code",[e._v("Refresh Token")]),e._v(" 机制。"),t("code",[e._v("Refresh Token")]),e._v(" 的有效期非常长，会在用户授权时，随 "),t("code",[e._v("Access Token")]),e._v(" 一起重定向到回调 URL，传递给客户端。")])])}),[],!1,null,null,null);_.default=s.exports}}]);