(window.webpackJsonp=window.webpackJsonp||[]).push([[21],{233:function(_,v,a){"use strict";a.r(v);var t=a(19),s=Object(t.a)({},(function(){var _=this,v=_.$createElement,a=_._self._c||v;return a("ContentSlotsDistributor",{attrs:{"slot-key":_.$parent.slotKey}},[a("blockquote",[a("p",[_._v("接口和内部类为我们提供了一种将接口与实现分离的更加结构化的方法。")])]),_._v(" "),a("p",[_._v("抽象类是普通的类与接口之间的一种中庸之道。构建某些未实现方法的类时，你的第一想法可能是创建接口。抽象类仍旧是用于此目的的一种重要而必须的工具。因为你不可能总是使用纯接口。")]),_._v(" "),a("h2",{attrs:{id:"_9-1-抽象类和抽象方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_9-1-抽象类和抽象方法"}},[_._v("#")]),_._v(" 9.1 抽象类和抽象方法")]),_._v(" "),a("p",[_._v("Java中提供一个叫做"),a("strong",[_._v("抽象方法")]),_._v("的机制，它仅有方法声明，没有方法体。例如:")]),_._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[_._v("abstract")]),_._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[_._v("void")]),_._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[_._v("fun")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[_._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[_._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[_._v(";")]),_._v("\n")])])]),a("p",[_._v("包含"),a("strong",[_._v("抽象方法")]),_._v("的类叫"),a("strong",[_._v("抽象类")]),_._v("，它也必须用"),a("code",[_._v("abstract")]),_._v("修饰。如果一个类包含一个或多个抽象方法，该类就必须限定为抽象的。")]),_._v(" "),a("p",[_._v("如果一个类是抽象类，那么无法为它创建对象。如果从一个抽象类集成，并想创建该新类的对象，那么必须实现所有的抽象方法。如果不这么做，那么导出类也是抽象类。")]),_._v(" "),a("h2",{attrs:{id:"_9-2-接口"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_9-2-接口"}},[_._v("#")]),_._v(" 9.2 接口")]),_._v(" "),a("p",[a("code",[_._v("interface")]),_._v("关键字产生一个完全抽象类，它没有提供任何具体实现。")]),_._v(" "),a("p",[_._v("接口被用来建立类与类之间的"),a("strong",[_._v("协议")]),_._v("。")]),_._v(" "),a("p",[_._v("接口的域隐式的是"),a("code",[_._v("static")]),_._v("和"),a("code",[_._v("final")]),_._v("的，方法隐式的是"),a("code",[_._v("public")]),_._v("的。")]),_._v(" "),a("h2",{attrs:{id:"_9-3-完全解耦"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_9-3-完全解耦"}},[_._v("#")]),_._v(" 9.3 完全解耦")]),_._v(" "),a("p",[a("strong",[_._v("策略")]),_._v("设计模式，根据不同的参数对象而具有不同的行为。")]),_._v(" "),a("p",[_._v("复用代码的第一种方式是客户端程序员遵循接口来编写他们自己的类。")]),_._v(" "),a("p",[a("strong",[_._v("适配器")]),_._v("设计模式，适配器中的代码将接受你所拥有的接口，并产生你所需要的接口。")]),_._v(" "),a("p",[_._v("将接口从具体实现中解耦使得接口可以应用于多种不同的具体实现，因此代码也就更具可复用性。")]),_._v(" "),a("h2",{attrs:{id:"_9-4-java的多重继承"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_9-4-java的多重继承"}},[_._v("#")]),_._v(" 9.4 Java的多重继承")]),_._v(" "),a("p",[_._v("接口不仅仅只是一种更纯粹形式的抽象类。它没有任何与接口相关的存储。")]),_._v(" "),a("p",[_._v("类可以单继承，多实现。")]),_._v(" "),a("p",[_._v("使用接口的核心原因：")]),_._v(" "),a("ol",[a("li",[_._v("为了能够向上转型为多个基类型")]),_._v(" "),a("li",[_._v("与使用抽象类的原因相同：防止客户端程序员创建该类的对象。")])]),_._v(" "),a("h2",{attrs:{id:"_9-5-接口的多继承"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_9-5-接口的多继承"}},[_._v("#")]),_._v(" 9.5 接口的多继承")]),_._v(" "),a("p",[_._v("接口可以通过"),a("code",[_._v("extends")]),_._v("来扩展组合成新的接口。一般情况下，只可以将"),a("code",[_._v("extends")]),_._v("用于单一类，但是在接口上却可以用来扩展多个接口。")]),_._v(" "),a("h3",{attrs:{id:"_9-5-1-组合接口时的名字冲突"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_9-5-1-组合接口时的名字冲突"}},[_._v("#")]),_._v(" 9.5.1 组合接口时的名字冲突")]),_._v(" "),a("p",[_._v("在实现接口时，返回类型不一致不会成功实现。")]),_._v(" "),a("h2",{attrs:{id:"_9-6-适配接口"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_9-6-适配接口"}},[_._v("#")]),_._v(" 9.6 适配接口")]),_._v(" "),a("p",[_._v("一个接口可以有多个实现。")]),_._v(" "),a("h2",{attrs:{id:"_9-7-接口中的域"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_9-7-接口中的域"}},[_._v("#")]),_._v(" 9.7 接口中的域")]),_._v(" "),a("p",[_._v("因为接口中的域自动是"),a("code",[_._v("static")]),_._v("和"),a("code",[_._v("final")]),_._v("，所以接口就称为了很便捷的创建常量租的工具。")]),_._v(" "),a("p",[_._v("但是由于Java SE5后，增加了"),a("code",[_._v("enum")]),_._v("关键字，用接口来创建常量已经没什么意义。")]),_._v(" "),a("h3",{attrs:{id:"_9-7-1-接口中的域一定要显式初始化"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_9-7-1-接口中的域一定要显式初始化"}},[_._v("#")]),_._v(" 9.7.1 接口中的域一定要显式初始化")]),_._v(" "),a("p",[_._v("接口中定义的域不能为空，可以被非常量表达式初始化。")]),_._v(" "),a("p",[_._v("域不是接口的一部分，他们的值被存储在该接口的静态存储区域内。")]),_._v(" "),a("h2",{attrs:{id:"_9-8-嵌套接口"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_9-8-嵌套接口"}},[_._v("#")]),_._v(" 9.8 嵌套接口")]),_._v(" "),a("p",[_._v("接口可以嵌套在类或其它接口中。")]),_._v(" "),a("h2",{attrs:{id:"_9-9-接口与工厂"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_9-9-接口与工厂"}},[_._v("#")]),_._v(" 9.9 接口与工厂")]),_._v(" "),a("p",[_._v("生成遵循某个接口的对象的典型方式就是"),a("strong",[_._v("工厂方法")]),_._v("设计模式。")]),_._v(" "),a("p",[_._v("这与直接调用构造器不同，我们在工厂对象上调用的是创建方法，而该工厂对象将生成接口的某个实现的对象。")]),_._v(" "),a("p",[_._v("理论上，通过这种方式，我们的代码将完全与接口的实现分离，这就使得我们可以透明地将某个实现替换为另一个实现。")]),_._v(" "),a("h2",{attrs:{id:"_9-10-总结"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_9-10-总结"}},[_._v("#")]),_._v(" 9.10 总结")]),_._v(" "),a("p",[_._v("任何的抽象性都应该是应真正的需求而产生的。当必须时，你应该重构接口而不是到处添加额外级别的间接性，并由此带来的额外的复杂性。")]),_._v(" "),a("p",[_._v("恰当的原则应该是优先选择类而不是接口。从类开始，如果接口越来越必须，那么就进行重构，采用接口，而不是一开始就总是选择接口。")]),_._v(" "),a("p",[_._v("接口是一种重要的工具，但是它们容易被滥用。")])])}),[],!1,null,null,null);v.default=s.exports}}]);