(window.webpackJsonp=window.webpackJsonp||[]).push([[21],{234:function(_,v,t){"use strict";t.r(v);var r=t(19),e=Object(r.a)({},(function(){var _=this,v=_.$createElement,t=_._self._c||v;return t("ContentSlotsDistributor",{attrs:{"slot-key":_.$parent.slotKey}},[t("h2",{attrs:{id:"_12-1-不可变string"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_12-1-不可变string"}},[_._v("#")]),_._v(" 12.1 不可变String")]),_._v(" "),t("p",[t("code",[_._v("String")]),_._v("对象是不可变的。即使我们将其引用指向了另一个"),t("code",[_._v("String")]),_._v("对象。但是原来的对象本身还在内存中。")]),_._v(" "),t("p",[_._v("查看源码中可以看到，"),t("code",[_._v("String")]),_._v("类中的方法，例如"),t("code",[_._v("replace")]),_._v("，都是创建了一个新的"),t("code",[_._v("char[]")]),_._v("来依次比较并替换后"),t("code",[_._v("new")]),_._v("了一个新的"),t("code",[_._v("String")]),_._v("对象返回，而不是改变"),t("code",[_._v("value[]")]),_._v("本身。这是因为"),t("code",[_._v("String")]),_._v("类中用来存储字符串的"),t("code",[_._v("value[]")]),_._v("是"),t("code",[_._v("final")]),_._v("，不能被改变。所以"),t("code",[_._v("String")]),_._v("对象是不可变的。")]),_._v(" "),t("h2",{attrs:{id:"_12-2-重载-与stringbuilder"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_12-2-重载-与stringbuilder"}},[_._v("#")]),_._v(" 12.2 重载“+”与StringBuilder")]),_._v(" "),t("p",[t("code",[_._v("String")]),_._v("对象是不可变的。"),t("code",[_._v("String")]),_._v("对象具有只读特性，指向它的任何引用都不能改变它的值。")]),_._v(" "),t("p",[_._v('这种不可变性带来一定的效率问题。"+"和"+="是 Java 中仅有的两个重载过的操作符，Java不允许程序员重载任何操作符。')]),_._v(" "),t("p",[_._v("使用“+”可以用来连接"),t("code",[_._v("String")]),_._v('。通常情况下，如果我们使用"+"，编译器在编译时会自动帮我们优化（使用'),t("code",[_._v("StringBuilder.append()")]),_._v("），但是在循环的情况下，编译器每次循环都会帮我们创建一个"),t("code",[_._v("StringBuilder")]),_._v('对象，这就是使用"+"或“+=”连接字符串所带来的效率问题。')]),_._v(" "),t("p",[_._v('当然通常简单的进行一次字符串连接，我们只需要简单的使用"+"就可以，编译器可以自动完成优化。')]),_._v(" "),t("h2",{attrs:{id:"_12-3-无意识的递归"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_12-3-无意识的递归"}},[_._v("#")]),_._v(" 12.3 无意识的递归")]),_._v(" "),t("p",[_._v("这是什么意思呢？")]),_._v(" "),t("p",[_._v("我们知道所有的容器类都为我们已经重写了"),t("code",[_._v("toString()")]),_._v("方法。例如"),t("code",[_._v("ArrayList.toString()")]),_._v("，它会遍历"),t("code",[_._v("ArrayList")]),_._v("中的所有元素，并调用它们的"),t("code",[_._v("toString()")]),_._v("方法，拼接在一起。")]),_._v(" "),t("p",[_._v("但是如果我想用"),t("code",[_._v("toString()")]),_._v("打印出对象的内存地址，我们通常考虑"),t("code",[_._v("this")]),_._v("关键字。")]),_._v(" "),t("p",[_._v("这就导致了一个问题。")]),_._v(" "),t("p",[t("code",[_._v("String")]),_._v('后的"+"都会被认为是字符串拼接符号，它后面的所有元素都会被转换成'),t("code",[_._v("String")]),_._v("，当"),t("code",[_._v("this")]),_._v("需要被转换成"),t("code",[_._v("String")]),_._v("时，它又调用了"),t("code",[_._v("toString()")]),_._v("方法。这就产生了"),t("strong",[_._v("递归调用")]),_._v("错误。")]),_._v(" "),t("h2",{attrs:{id:"_12-4-string的常用方法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_12-4-string的常用方法"}},[_._v("#")]),_._v(" 12.4 String的常用方法")]),_._v(" "),t("p",[_._v("当需要改变字符串的内容时，"),t("code",[_._v("String")]),_._v("类的方法都会返回一个新的"),t("code",[_._v("String")]),_._v("对象。如果内容没有发生改变，"),t("code",[_._v("String")]),_._v("的方法只是返回指向原对象的引用而已。这可以节约存储空间以及避免额外的开销。")])])}),[],!1,null,null,null);v.default=e.exports}}]);