(window.webpackJsonp=window.webpackJsonp||[]).push([[23],{237:function(t,s,a){"use strict";a.r(s);var n=a(19),e=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("blockquote",[a("p",[t._v("如果一个程序只包含固定数量的且其生命期都是已知的对象，那么这是一个非常简单的程序。")])]),t._v(" "),a("p",[t._v("Java 中有多种方式保存对象（应该说是对象的引用）。")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("数组是保存一组对象的最有效的方式，但是数组有固定的尺寸，一般你写程序时并不知道将需要多少个对象。")])]),t._v(" "),a("li",[a("p",[t._v("Java 实用类库还提供了一套相当完整的容器类来解决这个问题，其中基本的类型是"),a("code",[t._v("List")]),t._v(","),a("code",[t._v("Set")]),t._v(","),a("code",[t._v("Queue")]),t._v("和"),a("code",[t._v("Map")]),t._v("。这些对象类型也称之为"),a("strong",[t._v("集合类")]),t._v("，但由于 Java 的类库中使用了 "),a("code",[t._v("Collection")]),t._v(" 这个名字来指代该类库的一个特殊子集。所以我们用“容器”来称呼。")])])]),t._v(" "),a("p",[t._v("容器有一些特性。例如，"),a("code",[t._v("Set")]),t._v("对每个值都只保存一个对象，"),a("code",[t._v("Map")]),t._v("是允许你保存"),a("strong",[t._v("关联数组")]),t._v("（key-value）。容器类自动调整尺寸，不需要我们来考虑容器应该设置为多大。")]),t._v(" "),a("h2",{attrs:{id:"_11-1-泛型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_11-1-泛型"}},[t._v("#")]),t._v(" 11.1 泛型")]),t._v(" "),a("p",[t._v("使用"),a("strong",[t._v("泛型")]),t._v("在编译期防止将错误类型的对象放置到容器中。")]),t._v(" "),a("h2",{attrs:{id:"_11-2-基本概念"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_11-2-基本概念"}},[t._v("#")]),t._v(" 11.2 基本概念")]),t._v(" "),a("img",{attrs:{src:t.$withBase("/backend/java/Collection.jpg")}}),t._v(" "),a("ul",[a("li",[a("code",[t._v("Collection")]),t._v("。一个独立元素的序列，"),a("code",[t._v("List")]),t._v("必须按照插入顺序保存元素，"),a("code",[t._v("Set")]),t._v("不能有重复元素。"),a("code",[t._v("Queue")]),t._v("按照"),a("strong",[t._v("排队规则")]),t._v("来确定对象产生的顺序（通常与它们被插入的顺序相同）。")])]),t._v(" "),a("img",{attrs:{src:t.$withBase("/backend/java/Map.jpg")}}),t._v(" "),a("ul",[a("li",[a("code",[t._v("Map")]),t._v("。“键值对”对象，也被称为“关联数组”。它将某些对象与另外一些对象关联在一起。你可以使用键对象来查找值对象。")])]),t._v(" "),a("h2",{attrs:{id:"_11-3-添加一组元素"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_11-3-添加一组元素"}},[t._v("#")]),t._v(" 11.3 添加一组元素")]),t._v(" "),a("p",[a("code",[t._v("Arrays")]),t._v("和"),a("code",[t._v("Collections")]),t._v("类中都提供了很多实用方法。")]),t._v(" "),a("p",[a("code",[t._v("Arrays.asList()")]),t._v("方法接受一个数组或是用一个逗号分隔的元素列表，将其转换为一个"),a("code",[t._v("List")]),t._v("对象。例如：")]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("List")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Integer")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" integers "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Arrays")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("asList")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//或")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Integer")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" ints "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("List")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Integer")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" integers "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Arrays")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("asList")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ints"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[a("code",[t._v("Collections.addAll()")]),t._v("可以接收一个"),a("code",[t._v("Collection")]),t._v("对象，以及一个数组或是用逗号分割的列表。例如：")]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("List")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Integer")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" integers "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ArrayList")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Integer")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Arrays")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("asList")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Collections")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("addAll")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("integers"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("6")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("7")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("8")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//或")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Integer")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" ints "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("6")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("7")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("8")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Collections")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("addAll")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("integers"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" ints"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("div",{staticClass:"custom-block warning"},[a("p",{staticClass:"custom-block-title"},[t._v("WARNING")]),t._v(" "),a("p",[t._v("使用"),a("code",[t._v("Arrays.asList()")]),t._v("将数组当成"),a("code",[t._v("List")]),t._v(",但是这种情况下，底层表示的是数组，因此不能调整尺寸。如果你试图用"),a("code",[t._v("add()")]),t._v("或"),a("code",[t._v("delete()")]),t._v("方法在这种列表中添加或删除元素，就有可能会引发改变数组尺寸的尝试，将在运行时获得“Unsupported Operation(不支持的操作)”错误。")]),t._v(" "),a("p",[a("code",[t._v("Arrays.asList()")]),t._v("会根据其中的元素来创建它的"),a("code",[t._v("List<>")]),t._v("引用，如果你使用了错误的泛型，则无法通过编译。例如:")]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("List")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Object")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" powders "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Arrays")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("asList")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"A"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"B"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"C"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])])]),t._v(" "),a("h2",{attrs:{id:"_11-4-collection-和-map"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_11-4-collection-和-map"}},[t._v("#")]),t._v(" 11.4 Collection 和 Map")]),t._v(" "),a("p",[a("code",[t._v("Collection")]),t._v("类容器包括：")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("List")]),t._v(": 它以特定的顺序保存一组元素；\n"),a("ul",[a("li",[a("code",[t._v("ArrayList")]),t._v("：按照插入顺序保存元素。")]),t._v(" "),a("li",[a("code",[t._v("LinkedList")]),t._v("：按照插入顺序保存元素。")])])]),t._v(" "),a("li",[a("code",[t._v("Set")]),t._v(": 元素不能重复；\n"),a("ul",[a("li",[a("code",[t._v("HashSet")]),t._v(": 无序的。最快的查找技术。")]),t._v(" "),a("li",[a("code",[t._v("TreeSet")]),t._v(": 默认按照比较结果的升序保存对象。")]),t._v(" "),a("li",[a("code",[t._v("LinkedHashSet")]),t._v(": 按照被添加的顺序保存对象。")])])]),t._v(" "),a("li",[a("code",[t._v("Queue")]),t._v(": 只允许在容器的一端插入对象，并从另外一端移除对象。\n默认的打印行为（使用容器提供的"),a("code",[t._v("toString()")]),t._v("）用中括号括住。例如 [1, 2, 3]")])]),t._v(" "),a("p",[a("code",[t._v("Map")]),t._v("类容器包括：")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("HashMap")]),t._v(": 与"),a("code",[t._v("HashSet")]),t._v("一样，提供了最快的查找技术，无序的。")]),t._v(" "),a("li",[a("code",[t._v("TreeMap")]),t._v(": 按照比较结果的升序保存键。")]),t._v(" "),a("li",[a("code",[t._v("LinkedHashMap")]),t._v(": 按照插入顺序保存键，保留了"),a("code",[t._v("HashMap")]),t._v("的查询速度。\n"),a("code",[t._v("Map")]),t._v("保存键和与之关联的值，默认的打印行为（使用容器默认的"),a("code",[t._v("toString()")]),t._v("）用大括号括住。例如 {key1=1, key2=2, key3=3}")])]),t._v(" "),a("h2",{attrs:{id:"_11-5-list"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_11-5-list"}},[t._v("#")]),t._v(" 11.5 List")]),t._v(" "),a("p",[a("code",[t._v("List")]),t._v("有两种类型：")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("ArrayList")]),t._v("：它长于随机访问元素，但是在"),a("code",[t._v("List")]),t._v("的中间插入和移除元素时较慢。")]),t._v(" "),a("li",[a("code",[t._v("LinkedList")]),t._v("：在"),a("code",[t._v("List")]),t._v("中间进行的插入和删除操作较快，在随机访问较慢，特性集比"),a("code",[t._v("ArrayList")]),t._v("更大。")])]),t._v(" "),a("p",[a("code",[t._v("List")]),t._v("的常用方法：")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("boolean contains(Object o)")]),t._v("：确定某个对象是否在列表中。")]),t._v(" "),a("li",[a("code",[t._v("boolean addAll(Collection<? extends E> c)")]),t._v("：一个列表中是否包含另一个列表，如果包含则返回"),a("code",[t._v("true")]),t._v("。")]),t._v(" "),a("li",[a("code",[t._v("int lastIndexOf(Object o)")]),t._v("：查找元素的索引。未查找到此元素会返回 -1 。")]),t._v(" "),a("li",[a("code",[t._v("boolean remove(Object o)")]),t._v("：传递对象的引用给 "),a("code",[t._v("remove()")]),t._v("，删除成功返回"),a("code",[t._v("true")]),t._v("，失败返回"),a("code",[t._v("false")]),t._v("。")]),t._v(" "),a("li",[a("code",[t._v("boolean\tremoveAll(Collection<?> c)")]),t._v("：在一个列表中删除另一个列表。")]),t._v(" "),a("li",[a("code",[t._v("boolean retainAll(Collection<?> c)")]),t._v("：保存两个列表的交集。")]),t._v(" "),a("li",[a("code",[t._v("List<E> subList(int fromIndex, int toIndex)")]),t._v("：在较大的列表中截取一个片段返回一个小列表。对子列表的操作都会反应到初始列表，反之亦然。")])]),t._v(" "),a("h2",{attrs:{id:"_11-6-迭代器"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_11-6-迭代器"}},[t._v("#")]),t._v(" 11.6 迭代器")]),t._v(" "),a("p",[t._v("迭代器是一个对象，它的工作是遍历并选择序列中的对象，被称为轻量级对象，创建它的代价小。Java 中的"),a("code",[t._v("Iterator")]),t._v("只能单向移动，这个"),a("code",[t._v("Iterator")]),t._v("只能用来：")]),t._v(" "),a("ul",[a("li",[t._v("使用方法"),a("code",[t._v("iterator()")]),t._v("要求容器返回一个"),a("code",[t._v("Iterator")]),t._v("。"),a("code",[t._v("Iterator")]),t._v("将准备好返回序列的第一个元素。")]),t._v(" "),a("li",[t._v("使用"),a("code",[t._v("next()")]),t._v("获得序列中的下一个元素。")]),t._v(" "),a("li",[t._v("使用"),a("code",[t._v("hasNext()")]),t._v("检查序列中是否还有元素。")]),t._v(" "),a("li",[t._v("使用"),a("code",[t._v("remove()")]),t._v("将迭代器新近返回的元素删除。")])]),t._v(" "),a("p",[t._v("如果你只打算简单的向前遍历，而不修改"),a("code",[t._v("List")]),t._v("对象本身，那么"),a("code",[t._v("foreach")]),t._v("语法更加简介。")]),t._v(" "),a("p",[a("code",[t._v("Iterator")]),t._v("能够将遍历序列的操作与底层的结构分离。")]),t._v(" "),a("p",[t._v("迭代器统一了对容器的访问方式。")]),t._v(" "),a("h3",{attrs:{id:"_11-6-1-listiterator"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_11-6-1-listiterator"}},[t._v("#")]),t._v(" 11.6.1 ListIterator")]),t._v(" "),a("p",[a("code",[t._v("ListIterator")]),t._v("是一个更加强大的"),a("code",[t._v("Iterator")]),t._v("的子类型，它只能用于各种"),a("code",[t._v("List")]),t._v("类的访问。")]),t._v(" "),a("p",[a("code",[t._v("Iterator")]),t._v("只能向前移动，"),a("code",[t._v("ListIterator")]),t._v("可以双向移动。")]),t._v(" "),a("p",[a("code",[t._v("ListIterator")]),t._v("可以产生相对于迭代器在列表中指向的当前位置的前一个和后一个元素的索引，并且可以使用"),a("code",[t._v("set()")]),t._v("方法替换它访问过的最后一个元素。")]),t._v(" "),a("p",[t._v("还可以通过"),a("code",[t._v("listIterator(n)")]),t._v("创建一个一开始就指向列表索引为 n 的元素处的"),a("code",[t._v("ListIterator")]),t._v("。")]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ListIteration")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" args"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("List")]),t._v(" list "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ArrayList")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Arrays")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("asList")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"a"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"b"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"c"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"d"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"e"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ListIterator")]),t._v(" it "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" list"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("listIterator")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("it"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("hasNext")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("print")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("it"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("next")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('","')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v("it"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("nextIndex")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('","')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v("it"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("previousIndex")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('";"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("it"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("hasPrevious")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("print")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("it"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("previous")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('","')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n        it "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" list"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("listIterator")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("it"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("hasNext")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            it"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("next")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            it"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("set")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"z"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("list"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/**\n * a,1,0;b,2,1;c,3,2;d,4,3;e,5,4;\n * e,d,c,b,a,\n * [a, b, c, z, z]\n */")]),t._v("\n")])])]),a("h2",{attrs:{id:"_11-7-linkedlist"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_11-7-linkedlist"}},[t._v("#")]),t._v(" 11.7 LinkedList")]),t._v(" "),a("p",[a("code",[t._v("LinkedList")]),t._v("在执行某些操作（在"),a("code",[t._v("List")]),t._v("的中间插入和移除）时比"),a("code",[t._v("ArrayList")]),t._v("更高效，在随机访问操作方面要逊色一些。")]),t._v(" "),a("p",[a("code",[t._v("LinkedList")]),t._v("还添加了可以使用其用作栈，队列或双端队列的方法。")]),t._v(" "),a("h2",{attrs:{id:"_11-8-stack"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_11-8-stack"}},[t._v("#")]),t._v(" 11.8 Stack")]),t._v(" "),a("p",[t._v("“栈”通常是指“后进先出”（LIFO）的容器。"),a("code",[t._v("LinkedList")]),t._v("具有能够实现栈的所有功能的方法，因此可以直接将"),a("code",[t._v("LinkedList")]),t._v("作为栈使用。例如我们用"),a("code",[t._v("LinkedList")]),t._v("实现一个“栈”：")]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Stack")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("T")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("LinkedList")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("T")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" storage "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("LinkedList")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("T")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("push")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("T")]),t._v(" v"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        storage"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("addFirst")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("v"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("T")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("peek")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" storage"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getFirst")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("T")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("pop")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" storage"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("removeFirst")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("boolean")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("empty")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" storage"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("isEmpty")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("toString")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" storage"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("toString")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("h2",{attrs:{id:"_11-9-set"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_11-9-set"}},[t._v("#")]),t._v(" 11.9 Set")]),t._v(" "),a("p",[a("code",[t._v("Set")]),t._v("不保存重复的元素，常被用来测试归属性，可以很容易的询问某个对象是否在某个"),a("code",[t._v("Set")]),t._v("中。")]),t._v(" "),a("p",[a("code",[t._v("HashSet")]),t._v("专门对快速查找进行了优化，它所维护的顺序与"),a("code",[t._v("TreeSet")]),t._v("或"),a("code",[t._v("LinkedHashSet")]),t._v("都不同，因为它们的实现具有不同的元素存储方式。")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("HashSet")]),t._v("使用散列函数")]),t._v(" "),a("li",[a("code",[t._v("TreeSet")]),t._v("将元素存储在红-黑树数据结构中")]),t._v(" "),a("li",[a("code",[t._v("LinkedHashList")]),t._v("使用散列，但是看起来使用了链表。")])]),t._v(" "),a("p",[t._v("如果想对结果排序，一种方式就是用"),a("code",[t._v("TreeSet")]),t._v("来代替"),a("code",[t._v("HashSet")]),t._v("，它默认是按照元素的升序来排序。")]),t._v(" "),a("h2",{attrs:{id:"_11-10-map"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_11-10-map"}},[t._v("#")]),t._v(" 11.10 Map")]),t._v(" "),a("p",[t._v("key-value类型，常用方法：")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("boolean containsKey(Object key)")]),t._v(",测试是否存在某 key")]),t._v(" "),a("li",[a("code",[t._v("boolean containsValue(Object value)")]),t._v(",测试是否存在某值")])]),t._v(" "),a("h2",{attrs:{id:"_11-11-queue"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_11-11-queue"}},[t._v("#")]),t._v(" 11.11 Queue")]),t._v(" "),a("p",[t._v("队列，先进先出。")]),t._v(" "),a("p",[a("code",[t._v("LinkedList")]),t._v("实现了"),a("code",[t._v("Queue")]),t._v("接口，提供了方法用来支持队列的行为。因此"),a("code",[t._v("LinkedList")]),t._v("可以用作"),a("code",[t._v("Queue")]),t._v("的一种实现。")]),t._v(" "),a("p",[t._v("常用方法：")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("boolean offer(E e)")]),t._v(": 如果在不违反容量限制的情况下立即执行，则将指定的元素插入到此队列中。")]),t._v(" "),a("li",[a("code",[t._v("E peek()")]),t._v("：检索但不删除此队列的头，如果此队列为空，则返回 null 。")]),t._v(" "),a("li",[a("code",[t._v("E element()")]),t._v("：检索，但不删除，这个队列的头。 此方法与peek的不同之处在于，如果此队列为空，它将抛出抛出"),a("code",[t._v("NoSuchElementException")]),t._v("异常。")]),t._v(" "),a("li",[a("code",[t._v("E poll()")]),t._v("：检索并删除此队列的头，如果此队列为空，则返回 null 。")]),t._v(" "),a("li",[a("code",[t._v("E remove()")]),t._v("：检索并删除此队列的头。 此方法与poll不同之处在于，如果此队列为空，它将抛出"),a("code",[t._v("NoSuchElementException")]),t._v("异常。")])]),t._v(" "),a("h3",{attrs:{id:"_11-12-priorityqueue"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_11-12-priorityqueue"}},[t._v("#")]),t._v(" 11.12 PriorityQueue")]),t._v(" "),a("p",[a("code",[t._v("PriorityQueue")]),t._v("是一个"),a("strong",[t._v("优先级队列")]),t._v("。它能够根据传入的比较器，将元素自动按照比较器排序。"),a("code",[t._v("Integer")]),t._v(","),a("code",[t._v("String")]),t._v("和"),a("code",[t._v("Character")]),t._v("已经内建了自然排序。如果想要在"),a("code",[t._v("PriorityQueue")]),t._v("中使用自己的类，就必须包括额外的功能以产生自然排序，或者必须提供自己的"),a("code",[t._v("Comparator")]),t._v("。")]),t._v(" "),a("p",[a("code",[t._v("Priority")]),t._v("的常用方法：")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("boolean offer(E e)")]),t._v(": 将指定的元素插入到此优先级队列中。")]),t._v(" "),a("li",[a("code",[t._v("E peek()")]),t._v(": 检索但不删除此队列的头，如果此队列为空，则返回"),a("code",[t._v("null")]),t._v("。")]),t._v(" "),a("li",[a("code",[t._v("E poll()")]),t._v(": 检索并删除此队列的头，如果此队列为空，则返回"),a("code",[t._v("null")]),t._v("。")]),t._v(" "),a("li",[a("code",[t._v("boolean remove(Object o)")]),t._v(": 从该队列中删除指定元素的单个实例（如果存在）。")])]),t._v(" "),a("h2",{attrs:{id:"_11-12-collection和iterator"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_11-12-collection和iterator"}},[t._v("#")]),t._v(" 11.12 Collection和Iterator")]),t._v(" "),a("p",[a("code",[t._v("Collection")]),t._v("是描述所有序列容器的共性的根接口。"),a("code",[t._v("java.util.AbstratctCollection")]),t._v("类提供了"),a("code",[t._v("Collection")]),t._v("的默认实现，使得你可以创建"),a("code",[t._v("AbstractCollection")]),t._v("的子类型，而其中没有不必要的代码重复。")]),t._v(" "),a("p",[t._v("如果你实现"),a("code",[t._v("Collection")]),t._v("，就必须实现"),a("code",[t._v("iterator")]),t._v("。")]),t._v(" "),a("h2",{attrs:{id:"_11-13-foreach与迭代器"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_11-13-foreach与迭代器"}},[t._v("#")]),t._v(" 11.13 Foreach与迭代器")]),t._v(" "),a("p",[a("code",[t._v("foreach")]),t._v("语法可以用于数组，也可以用于任何"),a("code",[t._v("Collection")]),t._v("对象。之所以能够用于"),a("code",[t._v("Collection")]),t._v("，是因为"),a("code",[t._v("Iterable")]),t._v("接口，该接口包含了一个能够产生"),a("code",[t._v("iterator()")]),t._v("的方法，并且"),a("code",[t._v("Iterable")]),t._v("接口被"),a("code",[t._v("foreach")]),t._v("用来在序列中移动。因此如果你创建了任何实现"),a("code",[t._v("Iterable")]),t._v("的类，都可以将它用于"),a("code",[t._v("foreach")]),t._v("语句中。")]),t._v(" "),a("p",[t._v("大量的类都是"),a("code",[t._v("Iterable")]),t._v("，"),a("code",[t._v("Collection")]),t._v("继承了"),a("code",[t._v("Iterable")]),t._v("接口。")]),t._v(" "),a("p",[a("code",[t._v("foreach")]),t._v("语法可以用于数组或其它任何"),a("code",[t._v("Iterable")]),t._v("，但是数组不是"),a("code",[t._v("Iterable")]),t._v("。")]),t._v(" "),a("h2",{attrs:{id:"_11-14-总结"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_11-14-总结"}},[t._v("#")]),t._v(" 11.14 总结")]),t._v(" "),a("p",[t._v("容器不能持有基本类型，但是自动包装机制会仔细地执行基本类型到容器中所持有的包装器类型之间的双向转换。")]),t._v(" "),a("p",[a("code",[t._v("List")]),t._v("能够自动扩充容量。")]),t._v(" "),a("p",[t._v("如果要进行大量的随机访问，就用"),a("code",[t._v("ArrayList")]),t._v(";如果要经常从表中间插入或删除元素，则使用"),a("code",[t._v("LinkedList")]),t._v(".")]),t._v(" "),a("p",[t._v("各种"),a("code",[t._v("Queue")]),t._v("以及栈的行为，由"),a("code",[t._v("LinkedList")]),t._v("提供支持。")]),t._v(" "),a("p",[a("code",[t._v("HashMap")]),t._v("用来快速访问；"),a("code",[t._v("TreeMap")]),t._v("保持键始终处于排序状态，所有没有"),a("code",[t._v("HashMap")]),t._v("快;"),a("code",[t._v("LinkedHashMap")]),t._v("保持元素插入的顺序，但是也通过散列提供了快速访问的能力。")]),t._v(" "),a("p",[a("code",[t._v("Set")]),t._v("不接受重复元素。")]),t._v(" "),a("p",[a("code",[t._v("Vector")]),t._v("，"),a("code",[t._v("Hashtable")]),t._v("和"),a("code",[t._v("Stack")]),t._v("已经过时。")]),t._v(" "),a("p",[t._v("其实只有四种容器:"),a("code",[t._v("Map")]),t._v(","),a("code",[t._v("List")]),t._v(","),a("code",[t._v("Set")]),t._v("和"),a("code",[t._v("Queue")]),t._v("。")]),t._v(" "),a("p",[a("code",[t._v("Map")]),t._v("和"),a("code",[t._v("Collection")]),t._v("之间的唯一重叠就是"),a("code",[t._v("Map")]),t._v("可以使用"),a("code",[t._v("entrySet()")]),t._v("和"),a("code",[t._v("values()")]),t._v("来产生"),a("code",[t._v("Collection")]),t._v("。")])])}),[],!1,null,null,null);s.default=e.exports}}]);