(window.webpackJsonp=window.webpackJsonp||[]).push([[27],{240:function(t,a,s){"use strict";s.r(a);var n=s(19),r=Object(n.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h2",{attrs:{id:"_13-1-不可变string"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_13-1-不可变string"}},[t._v("#")]),t._v(" 13.1 不可变String")]),t._v(" "),s("p",[s("code",[t._v("String")]),t._v("对象是不可变的。即使我们将其引用指向了另一个"),s("code",[t._v("String")]),t._v("对象。但是原来的对象本身还在内存中。")]),t._v(" "),s("p",[t._v("查看源码中可以看到，"),s("code",[t._v("String")]),t._v("类中的方法，例如"),s("code",[t._v("replace")]),t._v("，都是创建了一个新的"),s("code",[t._v("char[]")]),t._v("来依次比较并替换后"),s("code",[t._v("new")]),t._v("了一个新的"),s("code",[t._v("String")]),t._v("对象返回，而不是改变"),s("code",[t._v("value[]")]),t._v("本身。这是因为"),s("code",[t._v("String")]),t._v("类中用来存储字符串的"),s("code",[t._v("value[]")]),t._v("是"),s("code",[t._v("final")]),t._v("，不能被改变。所以"),s("code",[t._v("String")]),t._v("对象是不可变的。")]),t._v(" "),s("h2",{attrs:{id:"_13-2-重载-与stringbuilder"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_13-2-重载-与stringbuilder"}},[t._v("#")]),t._v(" 13.2 重载“+”与StringBuilder")]),t._v(" "),s("p",[s("code",[t._v("String")]),t._v("对象是不可变的。"),s("code",[t._v("String")]),t._v("对象具有只读特性，指向它的任何引用都不能改变它的值。")]),t._v(" "),s("p",[t._v('这种不可变性带来一定的效率问题。"+"和"+="是 Java 中仅有的两个重载过的操作符，Java不允许程序员重载任何操作符。')]),t._v(" "),s("p",[t._v("使用“+”可以用来连接"),s("code",[t._v("String")]),t._v('。通常情况下，如果我们使用"+"，编译器在编译时会自动帮我们优化（使用'),s("code",[t._v("StringBuilder.append()")]),t._v("），但是在循环的情况下，编译器每次循环都会帮我们创建一个"),s("code",[t._v("StringBuilder")]),t._v('对象，这就是使用"+"或“+=”连接字符串所带来的效率问题。')]),t._v(" "),s("p",[t._v('当然通常简单的进行一次字符串连接，我们只需要简单的使用"+"就可以，编译器可以自动完成优化。')]),t._v(" "),s("h2",{attrs:{id:"_13-3-无意识的递归"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_13-3-无意识的递归"}},[t._v("#")]),t._v(" 13.3 无意识的递归")]),t._v(" "),s("p",[t._v("这是什么意思呢？")]),t._v(" "),s("p",[t._v("我们知道所有的容器类都为我们已经重写了"),s("code",[t._v("toString()")]),t._v("方法。例如"),s("code",[t._v("ArrayList.toString()")]),t._v("，它会遍历"),s("code",[t._v("ArrayList")]),t._v("中的所有元素，并调用它们的"),s("code",[t._v("toString()")]),t._v("方法，拼接在一起。")]),t._v(" "),s("p",[t._v("但是如果我想用"),s("code",[t._v("toString()")]),t._v("打印出对象的内存地址，我们通常考虑"),s("code",[t._v("this")]),t._v("关键字。")]),t._v(" "),s("p",[t._v("这就导致了一个问题。")]),t._v(" "),s("p",[s("code",[t._v("String")]),t._v('后的"+"都会被认为是字符串拼接符号，它后面的所有元素都会被转换成'),s("code",[t._v("String")]),t._v("，当"),s("code",[t._v("this")]),t._v("需要被转换成"),s("code",[t._v("String")]),t._v("时，它又调用了"),s("code",[t._v("toString()")]),t._v("方法。这就产生了"),s("strong",[t._v("递归调用")]),t._v("错误。")]),t._v(" "),s("h2",{attrs:{id:"_13-4-string的常用方法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_13-4-string的常用方法"}},[t._v("#")]),t._v(" 13.4 String的常用方法")]),t._v(" "),s("p",[t._v("当需要改变字符串的内容时，"),s("code",[t._v("String")]),t._v("类的方法都会返回一个新的"),s("code",[t._v("String")]),t._v("对象。如果内容没有发生改变，"),s("code",[t._v("String")]),t._v("的方法只是返回指向原对象的引用而已。这可以节约存储空间以及避免额外的开销。")]),t._v(" "),s("h2",{attrs:{id:"_13-5-格式化输出"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_13-5-格式化输出"}},[t._v("#")]),t._v(" 13.5 格式化输出")]),t._v(" "),s("h3",{attrs:{id:"_13-5-2-system-out-format"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_13-5-2-system-out-format"}},[t._v("#")]),t._v(" 13.5.2 System.out.format()")]),t._v(" "),s("p",[s("code",[t._v("System.out.format()")]),t._v("类似于 C 语言中的"),s("code",[t._v("printf()")]),t._v("，它就是模仿 C 的。与 C 一样。例如："),s("code",[t._v('System.out.format("%d,%f",x,y);')]),t._v("，"),s("code",[t._v("%d")]),t._v("和"),s("code",[t._v("%f")]),t._v("都表示一个占位符，分别为整数和浮点数。")]),t._v(" "),s("h3",{attrs:{id:"_13-5-3-formatter类"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_13-5-3-formatter类"}},[t._v("#")]),t._v(" 13.5.3 Formatter类")]),t._v(" "),s("p",[t._v("Java中，所有的格式化功能都由"),s("code",[t._v("java.util.Formatter类处理")]),t._v("。可以将"),s("code",[t._v("Formatter")]),t._v("看作一个翻译器，它将你的格式化字符串与数据翻译成需要的结果。当你创建一个"),s("code",[t._v("Formatter")]),t._v("对象的时候，需要向其构造器传递一些信息，告诉它最终的结果将向哪里输出。")]),t._v(" "),s("h3",{attrs:{id:"_13-5-4-格式化说明符"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_13-5-4-格式化说明符"}},[t._v("#")]),t._v(" 13.5.4 格式化说明符")]),t._v(" "),s("p",[t._v("可以在输出时控制宽度。例如：")]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Formatter")]),t._v(" f "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Formatter")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nf"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("format")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"%-15s %5s %10s\\n"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"商品"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"数量"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"价格"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nf"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("format")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"%-15.15s %5d %10.2f\\n"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"可口可乐"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"1"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"3.00"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[s("code",[t._v("%-15s")]),t._v("表示15个字符宽度，"),s("code",[t._v("%10.2f")]),t._v("表示精确10个字符宽度并精确2位小数。")]),t._v(" "),s("h3",{attrs:{id:"_13-5-5-formatter转换"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_13-5-5-formatter转换"}},[t._v("#")]),t._v(" 13.5.5 Formatter转换")]),t._v(" "),s("ul",[s("li",[t._v("%d 整数型")]),t._v(" "),s("li",[t._v("%c Unicode字符")]),t._v(" "),s("li",[t._v("%b Boolean值")]),t._v(" "),s("li",[t._v("%s String")]),t._v(" "),s("li",[t._v("%f 浮点数（十进制）")]),t._v(" "),s("li",[t._v("%e 浮点数（科学计数）")]),t._v(" "),s("li",[t._v("%x 整数（十六进制）")]),t._v(" "),s("li",[t._v("%h 散列码（十六进制）")])]),t._v(" "),s("h3",{attrs:{id:"_13-5-6-string-format"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_13-5-6-string-format"}},[t._v("#")]),t._v(" 13.5.6 String.format()")]),t._v(" "),s("p",[s("code",[t._v("String.format()")]),t._v("内部也是创建了"),s("code",[t._v("Formater")]),t._v("对象，只不过最后返回一个"),s("code",[t._v("String")]),t._v("对象。")]),t._v(" "),s("h2",{attrs:{id:"_13-6-正则表达式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_13-6-正则表达式"}},[t._v("#")]),t._v(" 13.6 正则表达式")]),t._v(" "),s("p",[s("code",[t._v("String")]),t._v("提供了一个方法用来判断该字符串是否匹配正则表达式。")]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"1234"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("matches")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"-?\\\\d+"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//true")]),t._v("\n")])])]),s("p",[t._v("还有一个正则表达式工具"),s("code",[t._v("split()")]),t._v("，其作用是将字符串从正则表达式的地方切开。")]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Hello World"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("split")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('" "')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//用空格切开")]),t._v("\n")])])]),s("p",[t._v("还有一个正则表达式工具是替换，替换第一个匹配到的字符串或者所有匹配的字符串。")]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[t._v("str"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("replaceFirst")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"f\\\\w+"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"located"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nstr"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("replaceAll")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"like|hate"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"love"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])])])}),[],!1,null,null,null);a.default=r.exports}}]);