(window.webpackJsonp=window.webpackJsonp||[]).push([[50],{263:function(r,t,l){"use strict";l.r(t);var n=l(19),e=Object(n.a)({},(function(){var r=this,t=r.$createElement,l=r._self._c||t;return l("ContentSlotsDistributor",{attrs:{"slot-key":r.$parent.slotKey}},[l("h2",{attrs:{id:"try和finally中都有return语句，执行哪一个return？"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#try和finally中都有return语句，执行哪一个return？"}},[r._v("#")]),r._v(" try和finally中都有return语句，执行哪一个return？")]),r._v(" "),l("p",[r._v("try 中的 return 语句调用的函数先于 finally 中调用的函数执行，也就是说 try 中的 return 语句先执行，finally 语句后执行，但try中的 return 并不是让函数马上返回结果，而是 return 语句执行后，将把返回结果放置进函数栈中，此时函数并不是马上返回，它要执行 finally 语句后才真正开始返回。但此时会出现两种情况：")]),r._v(" "),l("ul",[l("li",[r._v("如果finally中也有return，则会直接返回finally中的return结果，并终止程序，函数栈中的return不会被完成")]),r._v(" "),l("li",[r._v("如果finally中没有return，则在执行完finally中的代码之后，会将函数栈中保存的try return的内容返回并终止程序")])]),r._v(" "),l("p",[r._v("注意：")]),r._v(" "),l("ol",[l("li",[r._v("不管有没有出现异常，finally块中代码都会执行")]),r._v(" "),l("li",[r._v("当try和catch中有return时，finally仍然会执行")]),r._v(" "),l("li",[r._v("finally是在try中return后面的表达式运算后执行的（此时并没有返回运算后的值，而是先把要返回的值保存起来，管finally中的代码怎么样，返回的值都不会改变，仍然是之前保存的值），所以函数返回值是在finally执行前确定的")]),r._v(" "),l("li",[r._v("finally中最好不要包含return，否则程序会提前退出，返回值不是try或catch中保存的返回值")])])])}),[],!1,null,null,null);t.default=e.exports}}]);