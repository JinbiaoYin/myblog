(window.webpackJsonp=window.webpackJsonp||[]).push([[60],{271:function(t,s,a){"use strict";a.r(s);var n=a(19),e=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h2",{attrs:{id:"介绍"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#介绍"}},[t._v("#")]),t._v(" 介绍")]),t._v(" "),a("p",[t._v("在浏览器端进行 Ajax 请求时会出现跨域问题。")]),t._v(" "),a("p",[t._v("跨域，指的是浏览器不能执行其他网站的脚本。它是由浏览器的"),a("strong",[t._v("同源策略")]),t._v("造成的，是浏览器对 JavaScript 施加的安全限制。")]),t._v(" "),a("h2",{attrs:{id:"什么是同源？"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#什么是同源？"}},[t._v("#")]),t._v(" 什么是同源？")]),t._v(" "),a("p",[t._v("所谓同源是指，域名，协议，端口均相同")]),t._v(" "),a("ul",[a("li",[t._v("http://www.funtl.com --\x3e http://admin.funtl.com 跨域")]),t._v(" "),a("li",[t._v("http://www.funtl.com --\x3e http://www.funtl.com 非跨域")]),t._v(" "),a("li",[t._v("http://www.funtl.com --\x3e http://www.funtl.com:8080 跨域")]),t._v(" "),a("li",[t._v("http://www.funtl.com --\x3e https://www.funtl.com 跨域")])]),t._v(" "),a("h2",{attrs:{id:"如何解决跨域问题"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#如何解决跨域问题"}},[t._v("#")]),t._v(" 如何解决跨域问题")]),t._v(" "),a("h3",{attrs:{id:"使用cors-跨域资源共享-解决跨域问题"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#使用cors-跨域资源共享-解决跨域问题"}},[t._v("#")]),t._v(" 使用CORS(跨域资源共享)解决跨域问题")]),t._v(" "),a("p",[t._v('CORS 是一个 W3C 标准，全称是"跨域资源共享"（Cross-origin resource sharing）。它允许浏览器向跨源服务器，发出 XMLHttpRequest 请求，从而克服了 AJAX 只能同源使用的限制。')]),t._v(" "),a("p",[t._v("CORS 需要浏览器和服务器同时支持。目前，所有浏览器都支持该功能，IE 浏览器不能低于 IE10。整个 CORS 通信过程，都是浏览器自动完成，不需要用户参与。对于开发者来说，CORS 通信与同源的 AJAX 通信没有差别，代码完全一样。浏览器一旦发现 AJAX 请求跨源，就会自动添加一些附加的头信息，有时还会多出一次附加的请求，但用户不会有感觉。因此，实现 CORS 通信的关键是服务器。只要服务器实现了 CORS 接口，就可以跨源通信（在 header 中设置：Access-Control-Allow-Origin）")]),t._v(" "),a("h3",{attrs:{id:"spring-boot-配置-cors"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#spring-boot-配置-cors"}},[t._v("#")]),t._v(" Spring Boot 配置 CORS")]),t._v(" "),a("h4",{attrs:{id:"使用-java-配置的方式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#使用-java-配置的方式"}},[t._v("#")]),t._v(" 使用 Java 配置的方式")]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Configuration")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("CORSConfiguration")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("extends")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("WebMvcConfigurerAdapter")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Override")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("addCorsMappings")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("CorsRegistry")]),t._v(" registry"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        registry"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("addMapping")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"/**"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("allowedOrigins")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"*"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n                "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("allowedMethods")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"GET"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"HEAD"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"POST"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"PUT"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"DELETE"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"OPTIONS"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n                "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("allowCredentials")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("maxAge")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3600")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("h4",{attrs:{id:"使用注解的方式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#使用注解的方式"}},[t._v("#")]),t._v(" 使用注解的方式")]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@CrossOrigin")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("origins "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"*"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" maxAge "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3600")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("ul",[a("li",[t._v('origin="*"代表所有域名都可访问')]),t._v(" "),a("li",[t._v("maxAge: maxAge飞行前响应的缓存持续时间的最大年龄，简单来说就是Cookie的有效期 单位为秒。")])]),t._v(" "),a("h3",{attrs:{id:"使用-jsonp-解决跨域问题"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#使用-jsonp-解决跨域问题"}},[t._v("#")]),t._v(" 使用 JSONP 解决跨域问题")]),t._v(" "),a("p",[t._v("JSONP（JSON with Padding）是 JSON 的一种“使用模式”，可用于解决主流浏览器的跨域数据访问的问题。由于同源策略，一般来说位于 server1.example.com 的网页无法与 server2.example.com 的服务器沟通，而 HTML 的 "),a("code",[t._v("<script>")]),t._v(" 元素是一个例外。利用 "),a("code",[t._v("<script>")]),t._v(" 元素的这个开放策略，网页可以得到从其他来源动态产生的 JSON 资料，而这种使用模式就是所谓的 JSONP。用 JSONP 抓到的资料并不是 JSON，而是任意的 JavaScript，用 JavaScript 直译器执行而不是用 JSON 解析器解析（需要目标服务器配合一个 callback 函数）。")]),t._v(" "),a("h3",{attrs:{id:"cors-与-jsonp-的比较"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#cors-与-jsonp-的比较"}},[t._v("#")]),t._v(" CORS 与 JSONP 的比较")]),t._v(" "),a("p",[t._v("CORS 与 JSONP 的使用目的相同，但是比 JSONP 更强大。")]),t._v(" "),a("p",[t._v("JSONP 只支持 GET 请求，CORS 支持所有类型的 HTTP 请求。JSONP 的优势在于支持老式浏览器，以及可以向不支持 CORS 的网站请求数据。")]),t._v(" "),a("h3",{attrs:{id:"使用nginx反向代理解决跨域问题"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#使用nginx反向代理解决跨域问题"}},[t._v("#")]),t._v(" 使用Nginx反向代理解决跨域问题")]),t._v(" "),a("p",[t._v("以上跨域问题解决方案都需要服务器支持，当服务器无法设置 header 或提供 callback 时我们就可以采用 Nginx 反向代理的方式解决跨域问题。")]),t._v(" "),a("p",[t._v("Nginx 配置跨域案例，在 nginx.conf 的 location 中增加如下配置：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("add_header Access-Control-Allow-Origin * (或域名);\nadd_header Access-Control-Allow-Headers X-Requested-With;\nadd_header Access-Control-Allow-Methods GET,POST,OPTIONS;\n")])])]),a("p",[t._v("如：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("user  nginx;\nworker_processes  1;\n\nevents {\n    worker_connections  1024;\n}\n\nhttp {\n    include       mime.types;\n    default_type  application/octet-stream;\n\n    sendfile        on;\n\n    keepalive_timeout  65;\n\n    server {\n        listen 80;\n        server_name 192.168.75.128;\n        location / {\n            add_header Access-Control-Allow-Origin *;\n            add_header Access-Control-Allow-Headers X-Requested-With;\n            add_header Access-Control-Allow-Methods GET,POST,OPTIONS;\n\n            root /usr/share/nginx/wwwroot/cdn;\n            index index.jsp index.html index.htm;\n        }\n    }\n}\n")])])])])}),[],!1,null,null,null);s.default=e.exports}}]);